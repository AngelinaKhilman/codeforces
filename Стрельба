B. Стрельба
ограничение по времени на тест1 секунда
ограничение по памяти на тест256 мегабайт
вводстандартный ввод
выводстандартный вывод
Вася недавно начал тренироваться стрельбе из пистолета. Сегодня тренер предложил ему следующее задание. Он выставил на стол n банок в ряд. Банки пронумерованы слева направо от 1 до n. Чтобы выполнить задание, Васе предстоит сбить каждую из банок ровно по одному разу. При этом порядок, в котором Вася будет сбивать банки, он выбирает самостоятельно.

Вася знает, что прочность i-й банки равна ai. Это значит, что если Вася уже сбил x банок и сейчас начнет стрелять в i-ю банку, то, чтобы сбить эту банку, ему понадобится (ai⋅x+1) выстрел. Считайте, что если Вася начал стрелять в банку номер i, то он будет стрелять в нее, пока он ее не собьет.

Определите такой порядок стрельбы по банкам, что Вася сделает минимально возможное количество выстрелов, чтобы сбить каждую из n банок ровно по одному разу.

Входные данные
В первой строке следует целое число n (2≤n≤1000) — количество банок.

Во второй строке следует последовательность a1,a2,…,an (1≤ai≤1000), где ai равно прочности i-й банки.

Выходные данные
В первую строку выведите минимальное количество выстрелов, которые должен сделать Вася, чтобы сбить каждую из n банок ровно по одному разу.

Во вторую строку выведите последовательность из n различных целых чисел от 1 до n — номера банок в том порядке, в котором Вася должен по ним стрелять, чтобы минимизировать количество выстрелов. Если подходящих последовательностей несколько, разрешается вывести любую из них.







#include <bits/stdc++.h>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int n, k;
    vector <int> v;
    vector <int> v2;
    int sum = 0;
    cin >> n;
    for (int i = 0; i < n; i++){
        cin >> k;
        v.push_back(k);
        v2.push_back(i + 1);
    }
    for (int j = n - 1; j >= 0; j--){
        for (int i = 1; i < n; i++){
            if (v[i] > v[i - 1]){
                swap(v[i - 1], v[i]);
                swap(v2[i - 1], v2[i]);
            }
        }
    }
    for (int i = 0; i < n; i++){
        sum += v[i] * i + 1;

    }
    cout << sum << endl;
    for (int i = 0; i < n; i++){
        cout << v2[i] << " ";
    }

  return 0;
}
