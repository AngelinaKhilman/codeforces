#include <bits/stdc++.h>

using namespace std;
ограничение по времени на тест2 секунды
ограничение по памяти на тест256 мегабайт
вводстандартный ввод
выводстандартный вывод
Единственное отличие этой версии от усложнённой — это ограничения.

В Берляндском государственном университете началась сессия. Многие студенты уже сдают экзамены.

Совсем скоро Полиграф Полиграфович примет экзамен у группы из n студентов. Студенты будут сдавать экзамен подряд один за другим в порядке от 1-го до n-го. Процесс сдачи происходит следующим образом:

i-й студент подходит к преподавательскому столу и тянет билет;
если студент понимает, что билет для него слишком сложный, то он отказывается отвечать и уходит домой (этот процесс происходит настолько быстро, что считается, что на него не расходуется время);
если студент посчитал, что билет несложный, то он тратит ровно ti минут на сдачу экзамена, после чего он получает отметку и уходит домой.
Студенты сдают экзамен один за другим без перерывов. Полиграф Полиграфович в один момент времени принимает экзамен у одного студента.

Длительность всего экзамена составляет M минут (maxti≤M), поэтому чем ближе студент находится к концу списка, тем больше вероятность того, что он не успеет сдать экзамен.

Ваша задача состоит в том, чтобы для каждого студента i определить минимальное количество студентов, которые должны уйти домой, чтобы i-й студент гарантированно успел полностью сдать экзамен.

Для каждого студента i ответ надо искать независимо, то есть если при нахождении ответа для студента i1 про какого-то студента j выяснилость, что он должен уйти, то при нахождении ответа для i2 (i2>i1) студент j не обязательно должен уйти домой.

Входные данные
В первой строке входных данных содержатся два целых числа n и M (1≤n≤100, 1≤M≤100) — количество студентов и длительность всего экзамена в минутах, соответственно.

Во второй строке входных данных содержится n целых чисел ti (1≤ti≤100) — длительность сдачи экзамена i-го студента.

Гарантируется, что все значения ti не превосходят M.

Выходные данные
Выведите n чисел: i-е число должно быть равно минимальному количеству студентов, которые должны уйти с экзамена, чтобы i-й студент успел ответить (полностью).

Примеры
входные данныеСкопировать
7 15
1 2 3 4 5 6 7
выходные данныеСкопировать
0 0 0 0 0 2 3 
входные данныеСкопировать
5 100
80 40 40 40 60
выходные данныеСкопировать
0 1 1 2 3 
Примечание
Пояснение к примеру 1.

Обратите внимание, что сумма первых пяти длительностей сдач не превосходит M=15 (сумма равна 1+2+3+4+5=15). Таким образом, первые пять студентов могут сдавать экзамен даже если все студенты до них тоже сдают экзамен. Иными словами, первые пять чисел в ответе равны 0.

Для того, чтобы 6-й студент сдал экзамен необходимо, чтобы не менее 2-х студентов до него отказались сдавать (например, 3-й и 4-й, тогда 6-й закончит свою сдачу через 1+2+5+6=14 минут, что не превосходит M).

Для того, чтобы 7-й студент успел сдать экзамен необходимо, чтобы не менее 3-х студентов до него отказались сдавать (например, 2-й, 5-й и 6-й, тогда 7-й закончит свою сдачу через 1+3+4+7=15 минут, что не превосходит M).
int main() {
    ios_base::sync_with_stdio(false);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    vector <int> v;
    vector <int> v2;
    int n, M, k;
    cin >> n;
    cin >> M;
    for (int i = 0; i < n; i++){
        cin >> k;
        v.push_back(k);
    }
    for (int i = 0; i <  n; i++){
        int sum = 0;
        for (int j = 0; j < i; j++){
            v2.push_back(v[j]);
        }
        sort(v2.begin(), v2.end());
        sum += v[i];
        int r = 0;
        for (int j = 0; j < v2.size(); j++){
            if (sum + v2[j] <= M){
                sum += v2[j];
                r += 1;
            }
            else{
                break;
            }

        }

        cout << v2.size() - r << " ";
        v2.clear();
    }

  return 0;
}
